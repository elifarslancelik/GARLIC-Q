version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: garlicq
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ollama:
    image: ollama/ollama:latest
    ports:
      - "127.0.0.1:11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: ${DOCKERHUB_USERNAME:-garlicq}/garlic-q-backend:latest
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/garlicq}
      - PYTHONPATH=/app
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
    volumes:
      - model_cache:/root/.cache/torch
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: ${DOCKERHUB_USERNAME:-garlicq}/garlic-q-frontend:latest
    ports:
      - "127.0.0.1:80:80"
    depends_on:
      - backend
    environment:
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000}
    networks:
      - app-network
    restart: unless-stopped

  models:
    build:
      context: .
      dockerfile: models/Dockerfile
    image: ${DOCKERHUB_USERNAME:-garlicq}/garlic-q-models:latest
    ports:
      - "127.0.0.1:8001:8001"
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
    volumes:
      - model_cache:/root/.cache/torch
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  ollama_data:
  model_cache: 